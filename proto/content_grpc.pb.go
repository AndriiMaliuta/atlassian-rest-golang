// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: proto/content.proto

package com_andmal

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PageServiceClient is the client API for PageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PageServiceClient interface {
	GetPage(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (*Content, error)
	GetPages(ctx context.Context, in *PagesRequest, opts ...grpc.CallOption) (PageService_GetPagesClient, error)
}

type pageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPageServiceClient(cc grpc.ClientConnInterface) PageServiceClient {
	return &pageServiceClient{cc}
}

func (c *pageServiceClient) GetPage(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (*Content, error) {
	out := new(Content)
	err := c.cc.Invoke(ctx, "/andmal.PageService/GetPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageServiceClient) GetPages(ctx context.Context, in *PagesRequest, opts ...grpc.CallOption) (PageService_GetPagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &PageService_ServiceDesc.Streams[0], "/andmal.PageService/GetPages", opts...)
	if err != nil {
		return nil, err
	}
	x := &pageServiceGetPagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PageService_GetPagesClient interface {
	Recv() (*Content, error)
	grpc.ClientStream
}

type pageServiceGetPagesClient struct {
	grpc.ClientStream
}

func (x *pageServiceGetPagesClient) Recv() (*Content, error) {
	m := new(Content)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PageServiceServer is the server API for PageService service.
// All implementations must embed UnimplementedPageServiceServer
// for forward compatibility
type PageServiceServer interface {
	GetPage(context.Context, *PageRequest) (*Content, error)
	GetPages(*PagesRequest, PageService_GetPagesServer) error
	mustEmbedUnimplementedPageServiceServer()
}

// UnimplementedPageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPageServiceServer struct {
}

func (UnimplementedPageServiceServer) GetPage(context.Context, *PageRequest) (*Content, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPage not implemented")
}
func (UnimplementedPageServiceServer) GetPages(*PagesRequest, PageService_GetPagesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPages not implemented")
}
func (UnimplementedPageServiceServer) mustEmbedUnimplementedPageServiceServer() {}

// UnsafePageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PageServiceServer will
// result in compilation errors.
type UnsafePageServiceServer interface {
	mustEmbedUnimplementedPageServiceServer()
}

func RegisterPageServiceServer(s grpc.ServiceRegistrar, srv PageServiceServer) {
	s.RegisterService(&PageService_ServiceDesc, srv)
}

func _PageService_GetPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageServiceServer).GetPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/andmal.PageService/GetPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageServiceServer).GetPage(ctx, req.(*PageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageService_GetPages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PageServiceServer).GetPages(m, &pageServiceGetPagesServer{stream})
}

type PageService_GetPagesServer interface {
	Send(*Content) error
	grpc.ServerStream
}

type pageServiceGetPagesServer struct {
	grpc.ServerStream
}

func (x *pageServiceGetPagesServer) Send(m *Content) error {
	return x.ServerStream.SendMsg(m)
}

// PageService_ServiceDesc is the grpc.ServiceDesc for PageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "andmal.PageService",
	HandlerType: (*PageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPage",
			Handler:    _PageService_GetPage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPages",
			Handler:       _PageService_GetPages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/content.proto",
}
